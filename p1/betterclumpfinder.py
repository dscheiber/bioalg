import itertools

def betterclumpfinder(genome, k, length, t):
    kmerFinal = []
    first=0
    last=0

    print "starting kmer master list..."
    kmerMaster = [list(x) for x in itertools.product("ATGC", repeat=k)]
    kmerMaster.sort()
    print "done with kmer master list"

    print "creating frequencies empty list"
    #frequencies = [0 for x in range(len(kmerMaster))]
    frequencies = [0 for x in range(4**k)]
    print "done with frequencies empty list"

    print "creating clump empty list."
    #clump = [0 for x in range(len(kmerMaster))]
    clump = [0 for x in range(4**k)]
    print "done with clump empty list."
    window = genome[:length]

    print "generating frequencyArray for first window of genome."
    frequencyArray = computingfrequencies(window, k, kmerMaster, frequencies)
    print "done with frequencyArray"

    print "determining clumps in first window."
    for i in range(len(frequencyArray)-1):
        if frequencyArray[i]>= t:
            clump[i] = 1
    print "finished with clumps in first window."

    print "sliding window by 1..."
    for i in range(0, (len(genome)-length)):
        print i,"of",len(genome)-length
        first = kmerMaster.index(list(genome[i+1:i+1+k]))
        frequencyArray[first] = frequencyArray[first] - 1

        last = kmerMaster.index(list(genome[i+length-k+1: i+length-k+1+k]))
        frequencyArray[last] = int(frequencyArray[last]) + 1

        if frequencyArray[last] >= t:
            clump[last] = 1
    print "finished sliding window."        

    print "getting final clumps."        
    for i in range(len(frequencies)):
        if clump[i]==1:
            kmerFinal.append("".join(kmerMaster[index]))
    return " ".join(kmerFinal)

def xselections(items, n):
    if n==0: yield []
    else:
        for i in xrange(len(items)):
            for ss in xselections(items, n-1):
                yield [items[i]]+ss

##not really necessary...
def NG_patterntonumber(pattern, kmers): ##generates all combinations of items fit to n length. matches pattern to index number in generated list.
    return kmers.index(list(pattern))

def NG_numbertopattern(index, n, kmers): ##number to pattern without use of generator, takes kmers argument at the end for list of kmers
    return kmers[index]
###################

def computingfrequencies(string, k, kmerMaster, frequencies): ##faster kmer finder
    frequenciesString=""
    kmerList = kmerMaster  
    freq=frequencies
    for i in range(len(string)-k+1):
        kmer = list(string[i:(i+k)])
        index = kmerList.index(kmer)
        freq[index]+=1
    return freq


gen="CTAAGCTAGCACAATCTGTTGGATAGTGAGAGACCATGCCGTTTTATTTGCCGATTCCATCACTATGGTTCGGCAGTCGCCCGCGAAAATTCTCTGCCGCCAGCGGACTTACACTCCCGGACTTACACCAGCGGACTTACACACGGACGGACTTCGGACTTACACACGGGCCATTGACACGGGTGCCGTTTTTCAATTGCTCCCGCGGACTTACACATAGATGCTGGACCCGGACTTACACCGTAACTCTCAGTATGGACCGGATATTGCTGCACGAACCGGTCTGGCTGGGTCCACGGACTTACCGGACTTACACTTGAATGGCACTCCGGACTTACACCGACCTCCGGACCCGGACTTACACAGCGCGGACTTACACTGTACCGCAGTTGGTTTTAATCCACGTCCTGTTTAAGCCCCCTCGGACTTACACCGACTTGCCCAAAGTGCCGTCGAGCTCCATGATAGTTCGCTACGGACTTACACACACGTGTTTAAGCATCGGAAAATTCCGGACTTACGGACTTACACTACACGACGGATGACAGTCGAGTCATTTCTCATGGCGGACTTACACGGACTTACACCTACGGACTTACACCGTACGTGAAGTCATCCGGACTCGGACTTACACCGCGGACTTACACTTGTGCAGCGGACTTACACACCTTCTGGGCGCGGACTTACACGGATTTCCCCACCAGTCTCGAGCGTTTAATTCGAGGAATGCGGGGTGGCACCCGATTGTCATTCCAGGAAGTTATGCAGAAAGGTATCTAACTCACCGAGAGTTATATCGTAGCAGCTCCCTGCAGAAAGGTGCTTCTGCTGCAGAAAGGTTGTTTGCAGAAAGGTCAGAAAGGTACGTGCAGAAAGGTACATGCAGAAAGGTTCGACGTCATAGCGTGCAGAAAGGTAAAGGTTGCAGAAAGGTAAGGTGCAGTGCAGAAAGGTGGTGCGGTGAGACTGCAGAAAGGTCATACTTTGCATGCAGAAAGGTCTGGCACTGCAGAAAGGTTGGAAGCCGAAGAGCCGGTGCAGAAAGGTACTTCTTTTATGCAGAAAGGTTTCTAAATTGCAGAAAGGTGCATCCTGCTCTTATGCTCGCGTGGCGGCCCGCGAAGACCGAGGCGTTGCGTGCAGAAAGGTTGACATGCAGAAAGGTAAAACTAAAAATACTCGTGCAGAAAGGTATACTTATTGCAGAAAGGTATGCTCCGTCTAAACTAAAAATACTGAAGTATTTCCAAATTGCAGAAAGGTATTGCAGAAAGGTACTTCTAAAAATACTGCAGAAAGGTGGTATACTATCCTGTCTTGCGGGACCACTGCAGAAAGGTGAAAGGTTAAAAATACTAAAATACTGTGCTCAATTCCTAAAAATACTTAAAAATACTTAAAGAATTAACTCTCTAAAAACTAAAAATACTTCTAAAAATACTCTAAAAACTAAAAATACTAGCTATGGCCCATCATGATCTCACGCCTAAAAATACTTCCTAAAAATACTAGCAAGCCTAACTAAAAATACTTCCCCCTAATCCTAAAAATACTGATGCATCCCGTCTACACAGCCCTAAAAATACTAATACTTAAAAATACTGTTCATCGGGGCTAAAAATACTAAATACTTGTACCTCTCACGGTATTAGTCCGTGGGTACTAAATTATTAAGGCGGTTTGGTGCGTACAGCAATTGTGGTTATACACTACGAACATACAGATTTGGACCCCGATGAATCTCCTTGGGATATACAAAACAGTCTCCTAGCAGGGCCGGTAGGTTCCAAGATTAGAACTAAGAGCAGGATATGGGGTTAGTTGCGCCACTTAATGTGGCTGTGTATATCACGCATCGTGGGTACCTATCCGCAGGGTCTTTTATTTACAAGAGTTGCACCATAGTGTGGAGTCCGCATTTGGTTCAGTGGAGCAAGGACATTAATGTGTGGACGCAATTGTTTGCAGTGGACTTATTTGACTTATTTGTGGACCCGGACTTATTTGCTTATTTGACGCTGGCTCCCGAGAGCAATGCGTAAGGCGATATACCGCCCTGCTGATAATGGACTGGACTTATTTGCTAGCCGGACTTATTTGGATCGATAGCGTCGATTGGACTTATTTGGTAGGACTTATTTGTAATCGTTAGGACTTATTTGATGGCGGGGACACACAGCTAACCCGCTACCGTAGCTGCAACAATTGGGATAGCGTTATAGGCGGTCCACTCTGAGGACTTATTTGATCTGAGGACTTATTTGATTGGACTGGACTTATTTGACGTGGACTTATTTGAAGCAGATGGGACTTATTTGGCAACTACATGAGGTTGTTAATGTATAGGACTTATTTGTTTGAGGACTTATTTGGCTGCGTCGATGGACTTATTTGAGTTCAGCTTGTGCGGCCGGCAGCGTGTCAGCTGCATCAAATCTGGACTTATTTGGTAATCGCTGGACGTATACGGTGACGGGACTTATTGGACTTATTTGACTTATTTGGACTTATTTGTATTTGTTATTTGCCTTGGACTTATTTGGCCCGGGAGGACTTATTTGGATGCGTCTGCTGGCGAGGTAAACCGCGCTGGTGGCCCGGTCCAGGTAGTTATTTTAACGGAAAGCCCACGCCAAGGAGCTTCGAAGGTATTGTTCCAATGGGGTTAGTATTGGTCACTGTAAGGATTCCGGTATCGGGTCTTTATTAACCGGATAACGTTATTACCGTGCCTAAGGGTCAAATTTTTACATTTAGCGGTATAGTATGACCTGGAAAACCTTGCATAAAAAGGATTCCCGCGTCCACTAAGGCTCGTTAAAGCTAAACAGGGGACTTGGTTAAGACTCCATGGTACAACAGAGTACGTTGGGGTATATTAGTTAGGACGGCCCCGGCGATCCCGAAACATCACTCTTCTAGGTGGAAGCGGCATCGTGCCCTATTGCCGATTGCGGCACGTGCGAGATATTCTCCGTGTGACAGGAGTACTTCCGGTCACTTCGGGTCTGGCCGAATTGCGAATTGGGCAATTGTAATATCTCGCGTGTGATGCCAGTTGGTGCTACCAAACTTCCTGAGTCGTAGGGGTCGAATTGGGCAGCGAATTGGGCAGCCACACCCCGCTCAGATTACACTTGGCATCCAGCCAAGCAATCGAATTGGGCACACGAATTGGGCAACCGTCTCGCTCGACTCCGAATTGGGCAATGGTTCGCCGAATTGGGCAGTTTTGTTCGTATAAGCGGAAAAGACGAATTGGGCAGCTCATCCGAATTGGGCAACCAGCTTGGCACTAAACCCCTACGTACCGACGCGAATTGGGCACCGAATCGAATTGGGCACGAATTGGGCACGAATTGGGCAAATAGACCGAATTGGGCAAGGCATGCCGAATTGGGCATTGGGCCGAATTGGGCGAATTGGGCACAGGCTTGTTCTAATGGTTCCGGCGAATTGGGCACGAATTGGGCATGGGCACTAAGCAATTGCGACAACTGGCACGCGTATACCGAGAGAGACGTTCGAATTGGGCAGGAGCGACGAATTGGGCAGCAATTCGAATTGGGCAAGGACCCAACCCTTTATTGGGTCATTGGCCCAGGGGACGTCCTTGACCATCTCGTTAGATAGGATTACAGACCGCGGTACTCTTTGTCTCTCGCGCACAGTCATGCAACGGTCTTACTGCCGCACGCGGGATCTCCATAGGTCGGCGTACATGCGCCGATGCGTGATCTAAACCTCCGGCTCATTTTTCGACCCAGTTGCGGCTCGCAAGCGGGAATCTTCGGCCCGCGCTTTGTATCGGTAACCCCATGTAATTCGGCCGAGAAATAAAATCTGTTCACGTCGTGATTGTCCAACTGTCTGAAATCTTTGTAGCAGACCAGCAGCACACCTCCGCTAACGATCGTGACCGCTAGCTAATTGCTGTGCCGGAGACACATGAAGGGATAAATGCTGGACGATTTGCTTAATGGCGTTGCAATCTTACGTGAATGTTGGTAAACCTAACCTTACACGGCTGCCCGGTTATAGATCCGCGCGACAAGTGTACTCACTGCTATTGGCGCACTGAGACCTTCATGCTGAGGCCCAGAAAGCGAGGGTCTTGCAACATAACCTGCCTTGGTGGGAAGAGCTAATTCCAATTGCCGGACTAATACAGAGCCGCGCCCCAAGAGCCGCTTAGGTTCCGTAATGAACACTCTTACCCCTTACAGTCACACTTATAAAGTATCTCCCTAGGTGAAGCTCCCCTTGAGATACGACAGGATCTGCCCTCCGAAGGGCCGCATCATGGGTGAGAGTGTTCCGGTTGGTGTCAACCCTGGCTCACGTCGTTCGTAACCGACCAAATCCGGGGCAACTTTTGGCAAGTTAGCGGCGGTCCCGTTTCATTACAGAGTGGTCTTGTTGGAAGGAGCCAGAACAAACAAACACCAGAACAAACAATATCTGGCAGCCAGAACAAACGCCAGCCCCAGAACAAACCTAGCCAATGTCGGATGGTTACAGTCCCAGAACAAACACCCAGAACCCAGAACCCAGAACACCAGAACAAACGGCAGGAGAAGTACCAGGATGCACCAGAACACCAGAACAAACGATGGCCACGCTCCATGTGGAGGACAGCCAGAACAAACAACAAACGCCTGCACTACCGCCACGTACATATTTTCGCAGTTGAAATGCGCGCGGCCAGACCAGAACAAACGTCAGCAACGGACTGTCCATCTAACAGACACGAAAAACGGTATTGAGAACCATTCCAGTTCCGAAATGCCTGCCAGAACACCAGAACAAACCCCTTTCCAGAACAAACGAGGCAGTGATATATTGCCGATACAAGCCATTTCCAGCCAGAACAAACACCCAGAACAAACCGAACCAGAACAAACCCACCCCAGACCAGAACAAACTTTCCAGAACAAACGGGCGACATTACCAGAACCCAGAACAAACCAGAACAAACAACGTACTCGGAAAGTGTGATTGGGTCCGCTACGAGTCGACACGACCCATTTGAAGTACCCCACTGAGCGACACCGAAGAAGTTTGATCTCTGGCGTACAACCCGGCTATTCTATAACTAGTCGCAAAAGTCACGGAGCCATCTGAATGCCTCTGTCATCTAGAGTGAAGCGCGATAAAATTAAGGCTAAATGTGAAAGTTGTGTATGTCACTAGACGTGACCCCCCACAGGTTCTCTCTTCTGCCACGATATCTTGACACTGTATGCCGCTCGGGAATCTGTGAGCACCAGGCTTAAAACACACTCCATGGTGCACCCACCTAAAAGTAATAGTTGTGAGGGTTATACACAGGTTGTCGCTACCGTGAACGAGGCAGCGGTATCACCGGAGTGCTGGCGAGCAGGATAACCGTCCGCTTCACTGTTTCGCTGCGTTGCGGTACGGGTTCGGAAGGACCTTCCAATCCCCTGTAATGCCCGGTGTGTCTACAAGGCCGAAACAAAGGGAACTTTACGCCGTTAAGCATCTAAATGAGAAACTTAGGTTAAATGAATCCTTTCCATGCCGCATCGTAGCCCCAAGTTCGACGCATAAGAGACTGAGCGTACGAAGTATGGGGTTACCACATTGAGTCCAGTCCCCGAGTGAATCTCTATCGTGGCTACATAGTAAAAGTGACCACATTGAGTCCCATTGAGTCCACATTGAAACATTGAGTCCCGCGCTCGTTTTGGAAAGAACATTGAGTCCCATTGAGTCCTTCTCTAAATGAGGTCGGAAGGCACATTGAGACATTGAGTCACATTGAGTCCTACGTGGAACATTGAGTCCAGTCCATTGAGACATTGAGACATTGAGTCCGAGTCCGTACCCGCGCGAGAACTGCTCGCAGGGTACATTGAGTCCCATCACATTGAGTCCTGAATGCATGCGCTATGGACATTGAGTCCTGTAGTGCCGTACAACAACATTGAGTCCAACATTGAGTCCCATTGAGTAGGAAATAAGGAAATACGAAGGAAATACGAAGGCCATCACAAGTGAAGCGACTCCAGCGAACTAGGAAATACGAAAATACGAAACATTGAGTCCCACGTTAGGAAAAGGAAATACGACAGGAAATACGATTCCGTGACTAGGAAATACGACAGGAAATACGACATTGAGTCCATTCAGGAAATACGATCCAAGTTACCTAGGAAATACGAAATCGAGGTACGTGATTCGACTAGGAAATACGACTATTAGGAAATACGATTGAGAACGAGGCCAACAAAGGAAATACGAGCACAAGGAAATACGAGAGGAAATACGAAAGAGTAGGAAAAGGAAATACGAAGCTCTAACAGGAAATACGATAGGAAATACGATACGAAGCAAAACGGCCGGTCAAGTGCTAGGAAATACGAGTGTGTTAAGGAAATACGACACAGGAAATACGAATGAGGGCAAGTTGATTTTGGACAGCGGAGCAGGAAATACGAGGTGTGGAACAATAGGAAATACGAGAATGGTTTGTAAGGAGGAAATACAGGAAATACGATCAAGGAAATACGAGGAAATACGACACGGACTGAGCACGTCCGCATTCCAGTACTGAAACTTACTTCTATTCCAGACTAGGATAGATAGCGGCCGTTTTGTTAAAACATGGCCCTGTATCTCCTCCGGACCCCGGTAAAGTTCGCTACACCCTGAAAGAGGTTGAACAGCAACTGGGTCTTGTCTCCGTCATTATGTACAGTCAGGAGAGATGGCCATGCATCGCCGGAGAGCTCCCAGGACGTGAATTCAGATATTCGTCATGACTCGCTCGTGTTCCCAGCTTATATTCTCCCAGGGTAGGAACCTCCCTCTAACTTGGAGTGCTAATTCTGGGTAGGAACCTCCGTAGGAAGTAGGAACCTCATGGGCATTTTACTGAAGTAGGAACCTCACCTAAGGTGTAGGAACCTCAACCTCCAGTAGGAACCTCGTAGGAACCTCGCAGACCCATGACCATGGTAGGAACCGTAGGAACCTCCTCGCGGAGGGGCATTTACTCTGAAAGGAGGGGCATGGAGGGGCATTGGGGCATTGGAGTCTCACATACGCGGAGGGGAGGGGCATTGGAGGGATGCCCCAAGGAGGGGGGAGGGGCATTATCTACTCCGGAGGGGCATTCCTAAGTGTAGGAACCGTAGGAACCTCTAGCAGGAGGGGCATTGGAACCTCGGGAGGAGGGGCATTGGTAGGAACCTCTGAGGGAGGGGCATTTCCTCTAAGATAGGGAGGGGCATTGGAGGGGCATTGCATTAGGGCGTAGGAACCTCAGTAGGAACGGAGGGGCATTGGAGGGGCATTTAGGTAGGAACCTCTTCGCTGTGAACAATCCGTGTAGGAACGGAGGGGCATTGCATTTAGGGGTAGGAACGGAGGGGCGGAGGGGCATTAGGGGCATTGGAGGGGCATTTCCGGCCTTTGGGAGGGGCATTACCGGCCTTTGAGGAGGGGCATTGGAGGGGCATTCGTAGTTTGAACCGGCCTTTGAGTAACGAACCCGGCCTTGGAGGGGCATTTGTGAACCGGCCTTCCGGCCGGAGGGGCATTCCGGCCTTTGGAGGGGCATTCATTCATTGCCTTTGATCCGGCCTTTGAAGTTTAACGTAGTTTCCGGCCTTTGACGTAGTTTTGCCGGCCTTTGATTTACGTTCGCGGTATAAGCCGCATACCCGGCCGGCCTTTGAAGCCGCCGGCCTTTGACGCTGCTCTCTTTAGAACGTAGTTTCTGAACGTCCGGCCTTTGATGAGAGGAACGTAGTTTCGAACCGGCCTTTGATCTTAAACGGAACCCGGCCTTTGACCCGGCCTTTGATTGGCGGTAGAACGTAGCCCGGCCTCCGGCCTTTGATTTGAATCATTGCGAACGTAGAACGTAGCCGGCCTTTGAGAACGTAGTTCCGGCCTTTGAGATAGTTTATCCGGCCTTTGAGCCGGCCTTTGATCCGGCCTTTGATTGATGCTTTTACCATGGGTCAGTACCGTCAACTCGTCACGCTTAGCAACATGAAGACGGTGGTATAAGCTATTGACACAAGTGAAATCACCCAAGCCAGAGCCTGATCCTAGTCGACAAAGCACCAGCGTTACGAGGTCAATCATAAGCGGCTACGAGTGGCTGCGAATGATGAACGACCAATGGCTCCTCACACAATTCTTTAATCTAGCAAAGAGCACCCTGTTAATAGTTACGGGCATGGTAACTGACGTTTCGCCATAAAGACGGAAAGCAGCGCATTCTCGGGTGTCTTATACATCCGAAAGTTCCCATCCAACATAAATAAGAACTGCGTGGCCCAGTGGGTTTGATTTAAGCTCGGTTCGTGGCACTCAACATATCGCCTTGTGCACAGACCGGAAACACTTCTTGCCCTTTACGCACCGGATTCACGGTTGTGTCTGTAGGGCCCTACTGGCTTTGCGTTAACAAATATCGATAGAATGCCATTGAGACGAGCCTCGTTGATATCCGTGTGCTTTGAGCCCCCCAATTCTACGCGGACACCGGCGATCCCCGCGCCTCACTCAGAACAGATAAATGTTCCATTTCATTGAGTCCCCGAACCAACAACCGGGGTACAAAAAGACTGGTTAATAGCTGCAGAAACGTATTAAGTGGTTTCGAGGAACACAAAAGCAACGGCCGCCGGCGAGGGCGGGTCTCGCCCTTGGACCCAAGCCTATATGGCCATGAAGTCAACTACCATGGCCATGAACGCAGTCGGTTCGCCTATAGTTACCACGCAAATGGCCATGAAAATAATGGCCATGAAACAGATTCGCGCGTGATGGCCATGAAATGGCCATGAAATATGGCCATGAACATGGCATGGCCATGAACACCTCTCCGTACCATTGCAATCTGGGGGTCAATGCAATCTGGGTCTGGGGGTCAATGGCCATGAACTGCAATCTGGGGGCCATGCAATCTGGGCCATGCATGCAATCTGGGATGAACCGGCGATGCAATCTGGGAAGAATGCAATGCAATCTGGGTGCAATCTGGGGGGGGAAAATGGATGTGCAATCTGGGTGAATATATATGGCCATGATGCAATCTGGGGAAACATCCAGACGCAAAATACTCGTGAGCATAGATGGCTGCAATCTGGGATGGCCATGCAATCTGGGCGCATAGTCGCACAGAAATTATGACAGGACGTGCAATCTGGGAATGCAATCTGGGGGCCATGAAGAAGACTAGAGGATACGAGGATGGCTGCAATCTGGGTGGGCTGCAATCTGGGGCCTGCAATCTGGGCTTCCATCTTAGAGTGCAATCTGGGCGCATTGCAATCTGGGGCTTGCAATCTGGGTTGCTGCAATCTGGGATAATGCGTTTATCCTAGGGTTGGGGAGCTAATGGGAGCGCGACAGAATGCAATCTGGGTGCAATCTGGGTAATTTTGGTGAGTATTGTGCAATCTGGG"
print betterclumpfinder(genome=gen, k=11, length=519, t=18)


def betterclumpfinder_WORKING(genome, k, length, t):
    kmerFinal = []
    first=0
    last=0

    print "starting kmer master list..."
    kmerMaster = [list(x) for x in itertools.product("ATGC", repeat=k)]
    kmerMaster.sort()
    print "done with kmer master list"

    print "creating frequencies empty list"
    #frequencies = [0 for x in range(len(kmerMaster))]
    frequencies = [0 for x in range(4**k)]
    print "done with frequencies empty list"

    print "creating clump empty list."
    #clump = [0 for x in range(len(kmerMaster))]
    clump = [0 for x in range(4**k)]
    print "done with clump empty list."
    window = genome[:length]

    print "generating frequencyArray for first window of genome."
    frequencyArray = computingfrequencies(window, k, kmerMaster, frequencies)
    print "done with frequencyArray"

    print "determining clumps in first window."
    for i in range(len(frequencyArray)-1):
        if frequencyArray[i]>= t:
            clump[i] = 1
    print "finished with clumps in first window."

    print "sliding window by 1..."
    for i in range(0, (len(genome)-length)):
        print i,"of",len(genome)-length
        firstPattern = genome[i+1:i+1+k]
        first <- NG_patterntonumber(firstPattern, kmerMaster)
        frequencyArray[first] = frequencyArray[first] - 1
        lastPattern = genome[i+length-k+1: i+length-k+1+k]
        last = NG_patterntonumber(lastPattern, kmerMaster)
        frequencyArray[last] = int(frequencyArray[last]) + 1

        if frequencyArray[last] >= t:
            clump[last] = 1
    print "finished sliding window."        

    print "getting final clumps."        
    for i in range(len(frequencies)):
        if clump[i]==1:
            pattern = NG_numbertopattern(i, k, kmerMaster)
            kmerFinal.append("".join(pattern))
    return " ".join(kmerFinal)
